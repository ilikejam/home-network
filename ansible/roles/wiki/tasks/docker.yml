---
- name: docker | Create github-webhook-handler network
  community.docker.docker_network:
    name: github-webhook-handler

- name: docker | Create wiki network
  community.docker.docker_network:
    name: wiki

- name: docker | Create letsencrypt network
  community.docker.docker_network:
    name: letsencrypt

- name: docker | Create webmisc network
  community.docker.docker_network:
    name: webmisc

- name: docker | Create files network
  community.docker.docker_network:
    name: files

- name: docker | Create fileup network
  community.docker.docker_network:
    name: fileup

- name: docker | Create vaultwarden network
  community.docker.docker_network:
    name: vaultwarden

- name: docker | Stat haproxy.pem
  ansible.builtin.stat:
    path: /etc/letsencrypt/haproxy.pem
  register: stat_haproxy_pem_result

- name: docker | Run letsencrypt-oneshot container
  when: not stat_haproxy_pem_result.stat.exists
  community.docker.docker_container:
    name: letsencrypt-oneshot
    image: ilikejam/letsencrypt
    pull: true
    user: '{{ users["certbot"]["uid"] }}:{{ docker_gid }}'
    mounts:
      - type: bind
        source: /etc/letsencrypt
        target: /etc/letsencrypt
        read_only: false
    published_ports: 80:8000
    command: >
      bash -c 'certbot certonly --standalone --preferred-challenges http-01 --http-01-port 8000 --work-dir /var/tmp --logs-dir /var/tmp --agree-tos
      --non-interactive --cert-name this -m dave@davidstark.name -d {{ wiki_domain }},{{ vaultwarden_domain }} && cat /etc/letsencrypt/live/this/fullchain.pem
      /etc/letsencrypt/live/this/privkey.pem  > /etc/letsencrypt/haproxy.pem'
    restart_policy: "no"
    detach: false

- name: docker | Create github-webhook-handler container
  community.docker.docker_container:
    name: github-webhook-handler
    image: ilikejam/github-webhook-handler
    pull: true
    restart_policy: always
    user: '{{ users["wiki"]["uid"] }}:{{ users["wiki"]["gid"] }}'
    mounts:
      - type: bind
        source: /var/dockerbind/repos
        target: /repos
        read_only: false
      - type: bind
        source: "{{ github_deploy_key_path }}"
        target: "{{ github_deploy_key_path }}"
        read_only: true
      - type: bind
        source: "{{ github_webhook_secret_path }}"
        target: "{{ github_webhook_secret_path }}"
        read_only: true
    networks:
      - name: github-webhook-handler
    networks_cli_compatible: true
    exposed_ports: ["8000"]

- name: docker | Create letsencrypt container
  community.docker.docker_container:
    name: letsencrypt
    image: ilikejam/letsencrypt
    pull: true
    mounts:
      - type: bind
        source: /etc/letsencrypt
        target: /etc/letsencrypt
        read_only: false
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: false
    networks:
      - name: letsencrypt
    user: '{{ users["certbot"]["uid"] }}:{{ docker_gid }}'
    command: >
      bash -c 'sleep 10; while true; do certbot renew --standalone --http-01-port 8000 --work-dir /var/tmp --logs-dir /var/tmp --deploy-hook /deploy-hook;
      sleep 86400; done'
    restart_policy: always
    exposed_ports: ["8000"]
    networks_cli_compatible: true

- name: docker | Create gollum container
  community.docker.docker_container:
    name: wiki
    image: ilikejam/gollum
    pull: true
    user: '{{ users["wiki"]["uid"] }}:{{ users["wiki"]["gid"] }}'
    mounts:
      - type: bind
        source: /var/dockerbind/repos/wiki
        target: /wiki
    networks:
      - name: wiki
    restart_policy: always
    exposed_ports: ["8000"]
    networks_cli_compatible: true

- name: docker | Create webmisc container
  community.docker.docker_container:
    name: webmisc
    image: python:3-slim
    pull: true
    user: '{{ users["webmisc"]["uid"] }}:{{ users["webmisc"]["gid"] }}'
    mounts:
      - type: bind
        source: /var/dockerbind/webmisc
        target: /serve
    networks:
      - name: webmisc
    restart_policy: always
    exposed_ports: ["8000"]
    command: "bash -c 'cd /serve && python -m http.server 8000'"
    networks_cli_compatible: true

- name: docker | Create files container
  community.docker.docker_container:
    name: files
    image: python:3-slim
    pull: true
    user: '{{ users["files"]["uid"] }}:{{ users["files"]["gid"] }}'
    mounts:
      - type: bind
        source: /var/dockerbind/files
        target: /serve
        read_only: true
    networks:
      - name: files
    restart_policy: always
    exposed_ports: ["8000"]
    command: "bash -c 'cd /serve && python -m http.server 8000'"
    networks_cli_compatible: true

- name: docker | Create fileup container
  community.docker.docker_container:
    name: fileup
    image: ilikejam/file-upload
    pull: true
    user: '{{ users["files"]["uid"] }}:{{ users["files"]["gid"] }}'
    mounts:
      - type: bind
        source: /var/dockerbind/files
        target: /files
      - type: bind
        source: /etc/fileup/passwd
        target: /passwd
    networks:
      - name: fileup
    restart_policy: always
    exposed_ports: ["8000"]
    networks_cli_compatible: true

- name: docker | Create vaultwarden container
  community.docker.docker_container:
    name: vaultwarden
    image: vaultwarden/server:1.33.2
    pull: true
    user: '{{ users["vaultwarden"]["uid"] }}:{{ users["vaultwarden"]["gid"] }}'
    env:
      "ROCKET_PORT": "8000"
      "SIGNUPS_ALLOWED": "false"
    mounts:
      - type: bind
        source: /var/dockerbind/vaultwarden
        target: /data
    networks:
      - name: vaultwarden
    restart_policy: always
    exposed_ports: ["8000"]
    networks_cli_compatible: true

- name: docker | Create haproxy container
  community.docker.docker_container:
    name: haproxy
    image: haproxy:2.0
    pull: true
    user: '{{ users["haproxy"]["uid"] }}:{{ users["haproxy"]["gid"] }}'
    mounts:
      - type: bind
        source: /etc/haproxy/haproxy.cfg
        target: /usr/local/etc/haproxy/haproxy.cfg
        read_only: true
      - type: bind
        source: /etc/letsencrypt
        target: /etc/letsencrypt
        read_only: true
    published_ports: ["0.0.0.0:80:8080", "0.0.0.0:443:8443", "[::]:80:8080", "[::]:443:8443"]
    restart_policy: always
    networks:
      - name: bridge
      - name: github-webhook-handler
      - name: wiki
      - name: letsencrypt
      - name: webmisc
      - name: files
      - name: fileup
      - name: vaultwarden
    networks_cli_compatible: true
